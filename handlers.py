from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from keyboards import get_stock_keyboard
from stock_utils import load_stock_data
from elt import transform_data, prepare_data_for_model
from predictor import train_model_with_cv, predict_price
from plot_utils import plot_forecast  # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO
import pandas as pd

router = Router()

@router.message(F.text == "/start")
async def start_command(message: Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–∏
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_stock_keyboard())

@router.callback_query()
async def stock_selected(callback: CallbackQuery):
    ticker = callback.data
    await callback.message.edit_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker}...")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_stock_data(ticker)
    if df is not None:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        processed_df = transform_data(df)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
        X, y = prepare_data_for_model(processed_df)

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model, rmse = train_model_with_cv(X, y)

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        predicted_price = predict_price(model, X)  # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        predicted_date = processed_df['Date'].iloc[-1] + pd.Timedelta(days=1)

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        relative_error_pct = (rmse / predicted_price) * 100

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        image_stream = plot_forecast(
            processed_df['Date'],
            processed_df['Close'],
            predicted_date,
            predicted_price
        )

        # –°–æ–∑–¥–∞—ë–º BufferedInputFile –∏–∑ –ø–æ—Ç–æ–∫–∞
        plot_image_input = BufferedInputFile(
            file=image_stream.getvalue(),
            filename="forecast.png"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await callback.message.answer_photo(
            photo=plot_image_input,
            #caption=f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ –Ω–∞ {predicted_date.date()}: {predicted_price:.2f}"
             caption=(
                f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞ –Ω–∞ {predicted_date.date()}: {predicted_price:.2f}\n"
                f"üìâ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (RMSE): {rmse:.2f}\n"
                f"üìä –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {relative_error_pct:.2f}%"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∞–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_stock_keyboard())
    else:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–∏ —Å–Ω–æ–≤–∞
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∞–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_stock_keyboard())
